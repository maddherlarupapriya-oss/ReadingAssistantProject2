{
  "maddherlarupapriya@gmail.com": [
    {
      "id": "doc_20251011_224903",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-11T22:49:03.805407"
    },
    {
      "id": "doc_20251011_224920",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-11T22:49:20.081878"
    },
    {
      "id": "doc_20251011_224926",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-11T22:49:26.951675"
    },
    {
      "id": "doc_20251011_225137",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-11T22:51:37.822155"
    },
    {
      "id": "doc_20251011_230135",
      "title": "sample.png",
      "text": "Hi, this is my Project!",
      "preview": "Hi, this is my Project!",
      "created_at": "2025-10-11T23:01:35.459003"
    },
    {
      "id": "doc_20251012_002916",
      "title": "sample.docx",
      "text": "Design a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\nApplication Flow & Features:\nAuthentication (Login Page)\nImplement OTP-based login system\nRequire work email or Gmail account\nDesign clean login form with red CTA buttons\n2. Job Description Module\nCreate interface for text input (paste) OR file upload functionality\nBuild automatic skills extraction system from job descriptions\nInclude editable skills list with add/remove capabilities\nShow extracted skills as tags or chips for easy management\n3. Resume Upload Module\nDesign drag-and-drop upload interface supporting PDF and DOCX files\nInclude visual progress bars for each file upload\nDisplay per-file status indicators (uploading, completed, error states)\nHandle multiple file uploads simultaneously\n4. Results Dashboard\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual indicators), numeric scores (0-100 scale)\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators), semantic similarity scores, one-click shortlist button\nData Visualization: Include bar charts or line graphs showing score distributions\n5. Candidate Detail Pane\nIntegrate resume preview functionality (PDF/DOCX viewer)\nCreate AI feedback section with editable text blocks\nEnsure LLM-powered insights are clearly presented and modifiable\n6. Analytics Dashboard\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\" widget with mock data estimates\nMake widgets visually consistent with overall design system\nTechnical Considerations:\nEnsure responsive design for desktop and tablet use\nImplement smooth transitions and micro-interactions\nOptimize for recruiter workflow efficiency\nInclude loading states and error handling throughout\nDeliverables Expected:\nComplete UI/UX design mockups for all screens\nInteractive prototype demonstrating user flow\nDesign system documentation for colors, typography, and components\nCreate a cohesive, professional application that streamlines the recruitment process while maintaining excellent user experience standards.",
      "preview": "Design a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\nColor palette: White background, black text, red accents for CTAs and important sta...",
      "created_at": "2025-10-12T00:29:16.101975"
    },
    {
      "id": "doc_20251014_100229",
      "title": "sample.png",
      "text": "Hi, this is my Project!",
      "preview": "Hi, this is my Project!",
      "created_at": "2025-10-14T10:02:29.729591"
    },
    {
      "id": "doc_20251014_100437",
      "title": "AI-Powered_Reading_Assistant_for_Dyslexic_Students_Using_OCR_and_TTS1.docx",
      "text": "AI-Powered Reading Assistant for Dyslexic Students Using OCR and TTS\n 21CSC203P/ADVANCED PROGRAMMING  PRACTICE\n PROJECT REPORT\nSubmitted by\n RUPA PRIYA M (RA2411003020272)\n GVSS NITHEESHA (RA2411003020318)\nUnder the guidance of \nJean Justus\n(Associate Professor, Department of Computer Science and Engineering)\nin partial fulfilment for the award of the degree\nof\nBACHELOR OF TECHNOLOGY\nin\nCOMPUTER SCIENCE AND ENGINEERING\nOf\nFACULTY OF ENGINEERING AND TECHNOLOG\nSCHOOL OF COMPUTER SCIENCE ENGINEERING\nSRM INSTITUTE OF SCIENCE AND TECHNOLOGY RAMAPURAM, CHENNAI - 600089\n SRM INSTITUTE OF SCIENCE AND TECHNOLOGY\n  (Deemed to be University U/S 3 of UGC Act, 1956)\nBONAFIDE CERTIFICATE\nCertified that this project report AI-Powered Reading Assistant for Dyslexic Students Using OCR and TTS is the bonafide work of RUPA PRIYA M (RA2411003020272), GVSS NITHEESHA (RA2411003020318) who carried out the project work under my supervision. Certified further, that to the best of my knowledge the work reported herein does not form any other project report or dissertation on the basis of which a degree or award was conferred on an occasion on this or any other candidate.\nSubmitted for the project viva-voce held on___________\tat SRM Institute of Science and Technology, Ramapuram, Chennai- 600089.\nSRM INSTITUTE OF SCIENCE AND TECHNOLOGY\nRAMAPURAM, CHENNAI - 89\nDECLARATION\nWe hereby declare that the entire work contained in this project report titled AI-Powered Reading Assistant for Dyslexic Students Using OCR has been carried out by RUPA PRIYA M (RA2411003020272), GVSS NITHEESHA (RA2411003020318)  at SRM Institute of Science and Technology, Ramapuram, Chennai, under the guidance of Jean Justus Associate professor, Department of Computer Science and Engineering.\nPlace: Chennai RUPA PRIYA M\nDate:  G.V.S.S NITHEESHA\n \\\nABSTRACT\nThis project introduces an AI-powered reading assistant designed to specifically aid dyslexic students by integrating Optical Character Recognition (OCR) and Text-to-Speech (TTS) technologies. The system's primary function is to transform inaccessible visual text, including printed documents, low-quality scans, and common handwritten notes, into an accessible auditory format.\nThe workflow begins with input acquisition (camera capture or file upload), followed by the OCR module, which utilizes the Tesseract LSTM engine for text recognition. This text is then synthesized into natural-sounding speech. The assistant's crucial feature is the synchronized, word-by-word text highlighting displayed in the user interface, a scientifically proven method that reinforces the visual-auditory link essential for dyslexic learners' comprehension and fluency.\nThe application is built as a highly customizable, low-cost solution, offering users control over dyslexia-friendly fonts, reading speed, and voice pitch. By fostering independent reading and reducing reliance on external assistance, this tool aims to boost academic performance and confidence. The project represents a practical contribution to digital accessibility, benefiting not only dyslexic individuals but also language learners and those with visual impairments.\nTABLE OF CONTENTS\nABSTARCT \t \t\t  \nLIST OF FIGURES  \t\t  \nLIST OF ACRONYMS AND ABBREVIATIONS  \n1  Introduction  \t\t \n 1.1 Introduction \n 1.2  Problem Statement \n 1.3 Objectives \n 1.4 Scope and Applications\n2  Existing System \n3  Design (ER Design) and Proposed Methodology  \n4  Implementation (Java and Python)  \n5  Result and Discussion  \n6  Conclusion \n  References \nLIST OF FIGURES\n3.3 Conceptual System Architecture Diagram\n3.5.1 Level 0 Data Flow Diagram(Context Diagram)\n3.5.2 Level 1 Data Flow Diagram (Modular Interaction) \nLIST OF ACRONYMS AND ABBREVIATIONS\nAI-Artificial Intelligence\nOCR-Optical Character Recognition\nTTS-Text-to-Speech\nLSTM-Long Short-Term MEMORY\nWPM-Words Per Minute\nCER-Character Error Rate\nDFD-Data Flow Diagram\nNFR-Non-Functional Requirement\nCHAPTER 1\nINTRODUCTION\n  INTRODUCTION\nDyslexia is a common learning disability that fundamentally affects the ability to read and decode written language. This challenge stems from a neurological difference in the way the brain processes phonemes (the basic sound units of language), making the visual-to-phonological translation process slow and error-prone. Consequently, reading becomes an exhaustive task, often diverting cognitive resources away from comprehension and significantly impacting academic engagement.\nTraditional solutions, such as human readers or basic screen-reading software, often lack the necessary integration and customization required for effective therapeutic aid. This project recognizes the potential of modern Artificial Intelligence (AI), specifically in the domains of Computer Vision and Natural Language Processing, to create a sophisticated yet accessible intervention tool. By developing an integrated system that captures diverse physical text and instantly translates it into a supportive audio-visual format, we aim to overcome these foundational reading barriers.\n1.2 PROBLEM STATEMENT:\nThe core problem addressed by this project is the lack of a single, versatile, and therapeutically effective reading assistant that is both highly accurate and affordable for dyslexic students. Existing gaps include:\nLimited Input Flexibility: Most tools fail when presented with varied student inputs, such as low-quality document scans, complex non-standard fonts, or handwritten notes, forcing students to transcribe text manually.\nLack of Bimodal Synchronization: Simple TTS readers do not offer synchronized word-by-word highlighting, which is crucial for training the dyslexic brain to track text visually while hearing the corresponding sound.\nHigh Cost of Customization: Commercial products offering these features are often expensive, creating a financial barrier to access essential educational support tools.\n.\n 1.3 OBJECTIVES:\nThe overall Goal is to design, implement, and validate a seamless AI-Powered Reading Assistant that converts physical and digital text inputs into an accessible, synchronized audio-visual reading experience for dyslexic students.\nThe specific Objectives are:\nRobust Input Acquisition (FR01-FR05): Create a module capable of handling images, PDFs (using Poppler), DOCX, and live camera capture (using OpenCV), normalizing all inputs for the OCR engine.\nHigh-Accuracy OCR Pipeline (FR06): Integrate the Tesseract OCR engine and implement robust image pre-processing (binarization, deskewing) to ensure high text recognition accuracy, especially for moderately challenging inputs.\nsynchronized Bimodal Output (FR07, FR09): Develop a system that generates natural-sounding TTS and couples the audio playback with precise, word-level highlighting in the web interface.\n1.4 SCOPE AND MOTIVATION:\nScope\nThe current project implementation focuses on the core, end-to-end pipeline:\nTechnology Stack: Python (Flask, OpenCV, Tesseract, pdf2image) and JavaScript/HTML/CSS for the frontend.\nInput Support: JPG, PNG, PDF, and DOCX files; raw text paste; and single-frame camera capture.\nLanguage: English language OCR and TTS processing.\nCustomization: Local persistence of reading speed, pitch, and font selection.\nMotivation\nOur motivation is to harness open-source AI technologies (Tesseract, OpenCV, Flask) to build a low-cost, highly customizable, and independent reading solution. This system will empower students to engage with any text source from classroom handouts to textbooks\u2014fostering confidence and reducing their dependence on others.\nCHAPTER 2\nEXISTING SYSTEM\n2.1 Overview of Existing Reading Aids\nExisting solutions for reading assistance generally fall into two categories: traditional screen readers and proprietary commercial solutions.\nTraditional Screen Readers (e.g., NVDA, macOS VoiceOver): These are excellent for digital text (TXT, DOCX, Web content) but completely fail when presented with physical documents, image scans, or non-machine-readable text. They lack built-in OCR capabilities.\nBasic OCR Tools (e.g., Google Lens, simple apps): These can convert an image to text, but the output is static. They lack the integration with TTS and, critically, do not provide the essential synchronized word-by-word highlighting required for effective bimodal learning and therapeutic aid for dyslexic students.\nHigh-End Commercial Tools (e.g., ClaroRead, Kurzweil 3000): These offer the necessary bimodal features, advanced OCR, and custom fonts. However, their subscription models and high cost create a significant financial barrier, preventing widespread adoption in low-resource settings.\n2.2 Drawbacks of the Existing System\nThe primary drawback is the lack of a unified, affordable, and fully customizable solution that can handle diverse physical inputs while providing the therapeutically necessary synchronized output. The proposed system fills this gap by utilizing open-source AI (Tesseract LSTM) to deliver high-end accessibility features at a low cost, directly supporting the project's motivation.\nCHAPTER 3\nDESIGN (ER DESIGN) AND PROPOSED METHODOLOGY\n3.1 BLOCK DIAGRAM\nFig 3.1 Block Diagram \nPROPOSED METHODOLOGY\n3.1 Overview of Proposed Methodology\nThe proposed methodology employs a modular, sequential pipeline designed to ensure robustness, accuracy, and performance in transforming diverse text sources into an accessible bimodal output. The design is split into two primary environments: the Python-based Server-Side (Backend) handling processing and generation, and the Client-Side (Frontend) handling display and synchronization.\nThe methodology is driven by the necessity of high OCR accuracy for scanned documents and the therapeutic need for precise audio-visual synchronization for dyslexic users.\n3.2 System Block Diagram (Proposed Architecture)\nThe system architecture is structured into five distinct, sequential blocks, ensuring that the output of one module meets the prerequisite standards for the next. The overall flow is depicted below.\nFigure 3.2: Proposed System Block Diagram\nThe data flow is unidirectional, beginning with raw user input and culminating in the synchronized multimedia output delivered to the user interface.\n3.3 Detailed Description of System Modules\nEach block in the diagram represents a Python module or a critical process layer, implemented using specialized libraries to fulfill the functional requirements.\n3.3.1 Input Module (Python)\nThis module is responsible for handling all sources of text, converting them into a standardized format for processing.\n3.3.2 Pre-processing / Image Processing (Python)\nThis is a crucial stage for enhancing the quality of visual input before OCR, directly impacting the system's accuracy (NFR02).\nGrayscale Conversion: All colour images are converted to grayscale to reduce computational load and standardize colour channels.\nBinarization: The image is converted to a two-tone (black and white) format using Adaptive Thresholding. This maximizes the contrast between the text and background, which is essential for Tesseract's performance on scanned or noisy images.\nDeskewing / Noise Reduction: Basic filtering is applied to correct slight tilts in the image and remove salt-and-pepper noise, further improving character recognition.\n3.3.3 Core Module (AI Processing)\nThis block is the intelligence layer where the two primary AI technologies reside and operate based on user preferences.\n3.3.4 Database / Memory (Data Persistence)\nThis module handles the temporary and persistent storage necessary for running the application and maintaining user settings.\nTemporary Storage: Saves the generated speech as a local file (output.mp3) before streaming it to the client. This is essential as the TTS generation is a server-side process.\nUser Profile: Stores personalized user preferences (reading speed, voice pitch, preferred font, highlighting color) in a local JSON file (user_profile.json). This ensures the user's customized accessibility settings are maintained across sessions (FR12).\n3.3.5 Output (UI, Text, Voice)\nThe final block focuses on accessibility and user interaction on the client-side (web browser).\nFlask Web Interface: The Python server uses Flask to dynamically generate the HTML interface and serve the audio file.\nText Markup: The processed text is marked up on the server with unique <span> tags for every word, creating the necessary anchors for synchronization.\nSynchronization Logic: Client-side JavaScript listens to the audio element's timeupdate event. It uses a character-length-weighted algorithm to estimate which <span> tag corresponds to the current point in the audio, applying a highlight CSS class (FR09).\nUser Controls: The UI includes accessibility controls (FR10) and options to update the font and reading settings.\n3.4 Entity-Relationship (ER) Design\nThe system primarily handles two conceptual entities related to the user experience:\nRelationship: A User_Profile can be associated with multiple Input_Sessions (1-to-Many). This simple model is sufficient as the project focuses primarily on processing and not on long-term historical data analysis.\n3.2 ENTITIY RELATIONSHIP DIAGRAM IN PYTHON\nFig 3.2 ER Diagram for Python Code\nPROPOSED METHODOLOGY\nThe system operates based on a six-stage, unidirectional data pipeline, ensuring high accuracy and the delivery of the essential bimodal output.\nInput Acquisition (Module 1):\nThe system accepts text via Camera Capture, File Upload (JPG, PNG, PDF, DOCX), or Manual Paste.\nDOCX and Paste inputs are routed directly to the Text Cleaner for speed.\nPDFs are rendered to individual image pages using Poppler/pdf2image.\nImage Pre-processing (Module 2):\nVisual inputs (camera, scanned files, PDF pages) are converted to grayscale.\nAdaptive Binarization (using OpenCV) is applied to maximize text contrast and reduce background noise, which is vital for high OCR accuracy.\nCore Text Recognition (Module 3):\nThe pre-processed image is fed into the Tesseract OCR Engine (using the Python wrapper pytesseract).\nThe OCR uses optimized configuration settings (e.g., PSM 3) to accurately extract the raw text content.\nText Refinement and TTS Generation (Module 3/4):\nThe raw OCR output is passed to the Text Cleaner module to remove artifacts and normalize spacing.\nThe User Profile data is loaded from the local JSON file to retrieve customized speed and pitch settings.\nThe cleaned text is converted into speech using the gTTS library, and the resulting audio file (output.mp3) is saved to temporary storage.\nData Persistence and Markup:\nThe system saves the user's current settings to the User_Profile JSON file for continuity.\nThe cleaned text is prepared for the frontend by wrapping every word in a unique HTML <span> tag.\nClient-Side Presentation and Synchronization (Module 5):\nThe Flask server delivers the marked-up HTML and streams the output.mp3 file to the client browser.\nClient-side JavaScript initiates the synchronization loop, using the audio's current time and a proportional word-length estimation to precisely apply the highlight (FR09) to the corresponding <span> element.\nCHAPTER 4\nIMPLEMENTATION \n4.1 IMPLEMENTATION \nCHAPTER 5\nRESULT AND DISCUSSION\n5.1 RESULT: \nCHAPTER 6\nCONCLUSION\n6.1 Conclusion and Achievements\nThe AI-Powered Reading Assistant successfully meets its primary goal of providing an accessible, low-cost, and therapeutically effective reading aid for dyslexic students. By integrating the Tesseract LSTM OCR engine with a robust Python backend and innovative JavaScript synchronization logic, the system delivers accurate text recognition and the essential word-by-word highlighting feature.\nThe project achieved all key objectives: robust multi-format input handling (FR01-FR04), high accuracy on standard texts (NFR02), and crucial customization features (FR11, FR12) managed via a persistent local profile. The end-to-end latency was benchmarked well under the 10-second requirement, ensuring a smooth and responsive user experience. This solution represents a viable, open-source alternative to expensive commercial tools, promoting digital inclusivity in education.\n6.2 Future Enhancements and Direction\nThe project provides a strong foundation for future development:\nMultilingual Support: Expanding the language scope beyond English to include regional and international languages by integrating additional Tesseract language packs.\nAdvanced Voice Models: Replacing the simple gTTS library with a more advanced AI voice model (like those offered by cloud providers) to achieve even more natural and nuanced speech prosody.\nReal-Time Mobile Application: Developing a native mobile application to leverage the device's camera and processor for real-time document scanning in classrooms.\nLearning Progress Tracking: Implementing a simple database (e.g., SQLite) to track the student's reading speed improvement, preferred settings, and reading history over time.\nREFERENCE\n\uf0b7  Smith, A. (2020). The Role of Bimodal Presentation in Dyslexia Remediation. Journal of Educational Technology Research, 45(2), 112-125.\n\uf0b7  OpenCV. (n.d.). Official Documentation for Computer Vision Library. Retrieved from [Placeholder for OpenCV Documentation Link].\n\uf0b7  Tesseract OCR. (n.d.). The LSTM-based OCR Engine. Retrieved from [Placeholder for Tesseract Documentation Link].\n\uf0b7  Jain, R. K., & Sharma, M. (2018). Comparative Study of Image Pre-processing Techniques for Improving OCR Accuracy. International Journal of Computer Science & Engineering, 6(3).\n\uf0b7  Gutenberg, M., & Schulze, F. (2019). Designing Accessible Interfaces: Principles for Assistive Technology. Academic Press.\n\uf0b7  [Placeholder for additional reference on TTS prosody or Flask/Python implementation].",
      "preview": "AI-Powered Reading Assistant for Dyslexic Students Using OCR and TTS\n 21CSC203P/ADVANCED PROGRAMMING  PRACTICE\n PROJECT REPORT\nSubmitted by\n RUPA PRIYA M (RA2411003020272)\n GVSS NITHEESHA (RA241100302...",
      "created_at": "2025-10-14T10:04:37.170025"
    }
  ],
  "rmaddherla@gmai.com": [
    {
      "id": "doc_20251013_171045",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-13T17:10:45.250095"
    },
    {
      "id": "doc_20251013_171118",
      "title": "sample.docx",
      "text": "Design a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\nApplication Flow & Features:\nAuthentication (Login Page)\nImplement OTP-based login system\nRequire work email or Gmail account\nDesign clean login form with red CTA buttons\n2. Job Description Module\nCreate interface for text input (paste) OR file upload functionality\nBuild automatic skills extraction system from job descriptions\nInclude editable skills list with add/remove capabilities\nShow extracted skills as tags or chips for easy management\n3. Resume Upload Module\nDesign drag-and-drop upload interface supporting PDF and DOCX files\nInclude visual progress bars for each file upload\nDisplay per-file status indicators (uploading, completed, error states)\nHandle multiple file uploads simultaneously\n4. Results Dashboard\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual indicators), numeric scores (0-100 scale)\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators), semantic similarity scores, one-click shortlist button\nData Visualization: Include bar charts or line graphs showing score distributions\n5. Candidate Detail Pane\nIntegrate resume preview functionality (PDF/DOCX viewer)\nCreate AI feedback section with editable text blocks\nEnsure LLM-powered insights are clearly presented and modifiable\n6. Analytics Dashboard\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\" widget with mock data estimates\nMake widgets visually consistent with overall design system\nTechnical Considerations:\nEnsure responsive design for desktop and tablet use\nImplement smooth transitions and micro-interactions\nOptimize for recruiter workflow efficiency\nInclude loading states and error handling throughout\nDeliverables Expected:\nComplete UI/UX design mockups for all screens\nInteractive prototype demonstrating user flow\nDesign system documentation for colors, typography, and components\nCreate a cohesive, professional application that streamlines the recruitment process while maintaining excellent user experience standards.",
      "preview": "Design a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\nColor palette: White background, black text, red accents for CTAs and important sta...",
      "created_at": "2025-10-13T17:11:18.438711"
    },
    {
      "id": "doc_20251013_171138",
      "title": "sample.png",
      "text": "Hi, this is my Project!",
      "preview": "Hi, this is my Project!",
      "created_at": "2025-10-13T17:11:38.248689"
    },
    {
      "id": "doc_20251013_171254",
      "title": "Pasted Text",
      "text": "The Reading Assistant project addresses the need for accessible reading tools that support individuals with learning differences. The application combines modern OCR technology with text-to-speech capabilities to create an inclusive reading experience. The system is designed with a dyslexia-friendly interface using the OpenDyslexic font, increased spacing, and clear visual hierarchy.\u200b",
      "preview": "The Reading Assistant project addresses the need for accessible reading tools that support individuals with learning differences. The application combines modern OCR technology with text-to-speech cap",
      "created_at": "2025-10-13T17:12:54.619787"
    },
    {
      "id": "doc_20251014_095548",
      "title": "sample.png",
      "text": "Hi, this is my Project!",
      "preview": "Hi, this is my Project!",
      "created_at": "2025-10-14T09:55:48.031136"
    },
    {
      "id": "doc_20251014_095849",
      "title": "sample.pdf",
      "text": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs and important states\nStyle: Clean, approachable interface with rounded cards, soft shadows, and clear typography\nMaintain strong visual hierarchy throughout all screens\n\nApplication Flow & Features:\n\nAuthentication (Login Page)\n\nImplement OTP-based login system\n\nRequire work email or Gmail account\n\nDesign clean login form with red CTA buttons\n\n2. Job Description Module\n\nCreate interface for text input (paste) OR file upload functionality\n\nBuild automatic skills extraction system from job descriptions\n\nInclude editable skills list with add/remove capabilities\n\nShow extracted skills as tags or chips for easy management\n\n3. Resume Upload Module\n\nDesign drag-and-drop upload interface supporting PDF and DOCX files\n\nInclude visual progress bars for each file upload\n\nDisplay per-file status indicators (uploading, completed, error states)\n\nHandle multiple file uploads simultaneously\n\n4. Results Dashboard\n\nTable View: Sortable columns with candidate data, score chips (High/Medium/Low visual\nindicators), numeric scores (0-100 scale)\n\nCandidate Cards: Display matched skills (green indicators), missing skills (red indicators),\nsemantic similarity scores, one-click shortlist button\n\nData Visualization: Include bar charts or line graphs showing score distributions\n\n5. Candidate Detail Pane\n\nIntegrate resume preview functionality (PDF/DOCX viewer)\n\nCreate Al feedback section with editable text blocks\n\nEnsure LLM-powered insights are clearly presented and modifiable\n\n6. Analytics Dashboard\n\nDesign donut chart showing candidate distribution across High/Medium/Low categories\nInclude \"Average time-to-hire\u201d widget with mock data estimates\n\nMake widgets visually consistent with overall design system\n\nTechnical Considerations:\n\nEnsure responsive design for desktop and tablet use\n\nImplement smooth transitions and micro-interactions\n\nOptimize for recruiter workflow efficiency\n\nInclude loading states and error handling throughout\n\nDeliverables Expected:\n\nComplete UI/UX design mockups for all screens\n\nInteractive prototype demonstrating user flow\n\nDesign system documentation for colors, typography, and components\n\nCreate a cohesive, professional application that streamlines the recruitment process while\nmaintaining excellent user experience standards.",
      "preview": "--- Page 1 ---\nDesign a modern recruiter-focused web application MVP with the following specifications:\nVisual Design Requirements:\n\nColor palette: White background, black text, red accents for CTAs a...",
      "created_at": "2025-10-14T09:58:49.943024"
    }
  ]
}